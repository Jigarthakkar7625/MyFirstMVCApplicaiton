//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyFirstMVCApplicaiton
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MyDBJMAAEntities1 : DbContext
    {
        public MyDBJMAAEntities1()
            : base("name=MyDBJMAAEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AUDITTABLE> AUDITTABLEs { get; set; }

        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<DepartmentID> DepartmentIDs { get; set; }
        public virtual DbSet<EmpJimmy> EmpJimmies { get; set; }
        public virtual DbSet<EmpJinalTable> EmpJinalTables { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<Student_New> Student_New { get; set; }
        public virtual DbSet<User_Address> User_Address { get; set; }
        public virtual DbSet<UserCopy> UserCopies { get; set; }
        public virtual DbSet<AuditLog> AuditLogs { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserJMMY> UserJMMies { get; set; }
        public virtual DbSet<MyFilterView> MyFilterViews { get; set; }
        public virtual DbSet<MyFilterView_Demo> MyFilterView_Demo { get; set; }
        public virtual DbSet<MyFirstView> MyFirstViews { get; set; }
        public virtual DbSet<View_20230603> View_20230603 { get; set; }
    
        [DbFunction("MyDBJMAAEntities1", "GETTABLES")]
        public virtual IQueryable<GETTABLES_Result> GETTABLES()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GETTABLES_Result>("[MyDBJMAAEntities1].[GETTABLES]()");
        }
    
        [DbFunction("MyDBJMAAEntities1", "GETTABLES_Multi")]
        public virtual IQueryable<GETTABLES_Multi_Result> GETTABLES_Multi()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GETTABLES_Multi_Result>("[MyDBJMAAEntities1].[GETTABLES_Multi]()");
        }
    
        [DbFunction("MyDBJMAAEntities1", "MyFunction")]
        public virtual IQueryable<MyFunction_Result> MyFunction()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<MyFunction_Result>("[MyDBJMAAEntities1].[MyFunction]()");
        }
    
        [DbFunction("MyDBJMAAEntities1", "MyTableValuedFunction")]
        public virtual IQueryable<MyTableValuedFunction_Result> MyTableValuedFunction(Nullable<int> a)
        {
            var aParameter = a.HasValue ?
                new ObjectParameter("a", a) :
                new ObjectParameter("a", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<MyTableValuedFunction_Result>("[MyDBJMAAEntities1].[MyTableValuedFunction](@a)", aParameter);
        }
    
        [DbFunction("MyDBJMAAEntities1", "MyTableValuedFunction1")]
        public virtual IQueryable<MyTableValuedFunction1_Result> MyTableValuedFunction1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<MyTableValuedFunction1_Result>("[MyDBJMAAEntities1].[MyTableValuedFunction1]()");
        }
    
        public virtual ObjectResult<GetMultipleData_Result> GetMultipleData(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMultipleData_Result>("GetMultipleData", studentIdParameter);
        }
    
        public virtual ObjectResult<MyFirstSP_Result> MyFirstSP(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MyFirstSP_Result>("MyFirstSP", userIdParameter);
        }
    
        public virtual ObjectResult<SP_GetData_Result> SP_GetData(string studentName, Nullable<int> courseId, string address)
        {
            var studentNameParameter = studentName != null ?
                new ObjectParameter("studentName", studentName) :
                new ObjectParameter("studentName", typeof(string));
    
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("courseId", courseId) :
                new ObjectParameter("courseId", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetData_Result>("SP_GetData", studentNameParameter, courseIdParameter, addressParameter);
        }
    
        public virtual int SP_Insert_User(Nullable<int> userId, string userName, Nullable<bool> isActive, Nullable<int> salary, string department, string name)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("Salary", salary) :
                new ObjectParameter("Salary", typeof(int));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Insert_User", userIdParameter, userNameParameter, isActiveParameter, salaryParameter, departmentParameter, nameParameter);
        }
    
        public virtual ObjectResult<SP_SaveEmployee_Result> SP_SaveEmployee(Nullable<int> userId, string action)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SaveEmployee_Result>("SP_SaveEmployee", userIdParameter, actionParameter);
        }
    
        public virtual int Sp_Transaction(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Transaction", idParameter);
        }
    }
}
